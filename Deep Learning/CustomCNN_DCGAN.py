# -*- coding: utf-8 -*-
"""Final Project - 7643.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dNuB1hXXXX95NypAS3fpsWQZqbKYJTN7
"""

pip install kornia

import torch
import torch.nn as nn
import torchvision
from torchvision import datasets, models, transforms
import numpy as np
from torch import optim
from typing import Iterable, List
from torch.utils.data import (DataLoader,)  # Gives easier dataset managment by creating mini batches etc.
from tqdm import tqdm  # For nice progress bar!
import kornia
import matplotlib.pyplot as plt
import os
from PIL import Image
from torchvision.datasets import ImageFolder
from torch.utils.data import Dataset, random_split, DataLoader
import cv2
from sklearn.model_selection import train_test_split
from cv2 import COLOR_RGB2GRAY
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns
seed = torch.manual_seed(1947)

DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(DEVICE)

# from google.colab import drive
# drive.mount('/content/drive')

import kagglehub

# Download kaggle dataset
path = kagglehub.dataset_download("ismailpromus/skin-diseases-image-dataset")

print("Path to dataset files:", path)

print(os.listdir(path))

path = os.path.join(path,'IMG_CLASSES')
print(os.listdir(os.path.join(path,'1. Eczema 1677')))

TARGET_SIZE = (64, 64)  # (height, width)


# Transformation pipeline
transform = transforms.Compose([
    transforms.Resize(TARGET_SIZE),       # Resizes shorter edge to target size (maintains aspect ratio)
    transforms.CenterCrop(TARGET_SIZE),   # Ensures exact size by center cropping
    transforms.ToTensor(),                # Converts to tensor [C, H, W]
    # Add normalization if needed (e.g., for pretrained models)
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])


dataset = ImageFolder(path, transform=transform)

print(dataset)

# labels = []
# images = []
# classes = []
# image_name = []

# for i in os.listdir(os.path.join(path)):
#   string_print = os.listdir(os.path.join(path,i))
#   for j in string_print:
#     string_label = i.split('.')
#     string_label = int(string_label[0])
#     labels.append(string_label)

#     images.append(cv2.imread(os.path.join(path, i,j)))
#     classes.append(i)
#     image_name.append(j)


# images = torch.tensor(images)
# labels = torch.tensor(labels)
# classes = torch.tensor(classes)
# image_name = torch.tensor(image_name)

# TARGET_SIZE = (64, 64)  # (height, width)


# # Transformation pipeline
# transform = transforms.Compose([
#     transforms.Resize(TARGET_SIZE),       # Resizes shorter edge to target size (maintains aspect ratio)
#     transforms.CenterCrop(TARGET_SIZE),   # Ensures exact size by center cropping
#     transforms.ToTensor(),                # Converts to tensor [C, H, W]
#     # Add normalization if needed (e.g., for pretrained models)
#     transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
# ])

# images = [transform(img) for img in images]

# print(os.listdir(os.path.join(path)))
# print(labels[0])
# print(images[0])
# print(classes[0])
# print(image_name[0])

# image = Image.open(os.path.join(path, '10. Warts Molluscum and other Viral Infections - 2103', 'v-herpes-buttocks-16.jpg'))
# image_rgb = cv2.cvtColor(np.array(images[0]), cv2.COLOR_BGR2RGB)
# #image_rgb = images[0]
# plt.imshow(image_rgb)
# plt.show()

# plt.imshow(image)
# plt.show()

loss_function = 'CE' # CE or FL


class Project_CNN(nn.Module):
    def __init__(self, loss_func = loss_function):
        super().__init__()

        self.loss_func = loss_func
        #Layer = Conv - BatchNorm - ReLU - MaxPool


        self.conv1 = nn.Conv2d(in_channels = 3, out_channels= 32, kernel_size=3, stride=1, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.relu1 = nn.ReLU()
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)


        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.bn2 = nn.BatchNorm2d(64)
        self.relu2 = nn.ReLU()
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)


        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.bn3 = nn.BatchNorm2d(128)
        self.relu3 = nn.ReLU()
        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)


        self.conv4 = nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)
        self.bn4 = nn.BatchNorm2d(256)
        self.relu4 = nn.ReLU()
        self.pool4 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.conv5 = nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1)
        self.bn5 = nn.BatchNorm2d(512)
        self.relu5 = nn.ReLU()
        self.pool5 = nn.MaxPool2d(kernel_size=2, stride=2)

        # self.conv6 = nn.Conv2d(512, 1024, kernel_size=3, stride=1, padding=1)
        # self.bn6 = nn.BatchNorm2d(1024)
        # self.relu6 = nn.ReLU()
        #self.pool6 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.dropout = nn.Dropout(0.5)
        # self.conv7 = nn.Conv2d(1024, 2048, kernel_size=3, stride=1, padding=1)
        # self.bn7 = nn.BatchNorm2d(2048)
        # self.relu7 = nn.ReLU()
        #self.pool7 = nn.MaxPool2d(kernel_size=2, stride=2)
        # Fully connected layer

        self.fc = nn.Linear(128 * 4 * 4, 10)

        if self.loss_func == 'CE':
            pass
        elif self.loss_func == 'FL':
            self.softmax = nn.Softmax(dim=1)


    def forward(self, x):
        # Layer 1
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu1(x)
        x = self.pool1(x)

        # Layer 2
        x = self.conv2(x)
        x = self.bn2(x)
        x = self.relu2(x)
        x = self.pool2(x)

        # Layer 3
        x = self.conv3(x)
        x = self.bn3(x)
        x = self.relu3(x)
        x = self.pool3(x)

        # Layer 4
        x = self.conv4(x)
        x = self.bn4(x)
        x = self.relu4(x)
        x = self.pool4(x)

        # Layer 5
        x = self.conv5(x)
        x = self.bn5(x)
        x = self.relu5(x)
        x = self.pool5(x)

        # Layer 6
        # x = self.conv6(x)
        # x = self.bn6(x)
        # x = self.relu6(x)
        # #x = self.pool6(x)
        x = self.dropout(x)
        # # Layer 7
        # x = self.conv7(x)
        # x = self.bn7(x)
        # x = self.relu7(x)
        #x = self.pool7(x)


        # Flatten and fully connected
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        if self.loss_func == 'CE':
            pass
        elif self.loss_func == 'FL':
            x = self.softmax(x)
        return x

# kwargs_model = {"alpha": 0.5,
#                 "gamma": 2.0,
#                 "reduction": 'mean'}

def data_split(data):
  #x_train, x_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=1947)
  train_size = int(0.8 * len(dataset))  # 80% for training
  test_size = len(dataset) - train_size  # 20% for testing
  train_dataset, test_dataset = random_split(dataset, [train_size, test_size])
  return train_dataset, test_dataset

# def loss_func(pred, target, kwargs):
#   output = kornia.losses.focal_loss(pred, target, **kwargs)
#   return(output.backward())

# def optimizer(model_params, lr):
#   return optim.Adam(model_params, lr=lr)

train_datset, test_dataset = data_split(dataset)

sample, label = train_datset[1]
print(f"Sample shape: {sample.size()}")  # For transformed images
print(f"Label: {label} ({dataset.classes[label]})")

CNN = Project_CNN().to(DEVICE)

optimizer = optim.Adam(CNN.parameters(), lr=0.001)

if loss_function == 'CE':
  criterion = nn.CrossEntropyLoss()
elif loss_function == 'FL':
  pass

kwargs_model = {"alpha": 0.5,
                "gamma": 2.0,
                "reduction": 'mean'}

num_epochs = 10
learning_rate = 0.001
batch_size = 32

train_loader = DataLoader(dataset=train_datset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=True)

history = {'train_loss': [], 'val_loss': [], 'train_acc': [], 'val_acc': []}

for epoch in range(num_epochs):
    CNN.train()
    running_loss = 0.0
    correct = 0
    total = 0
    print(f"Epoch {epoch+1}/{num_epochs}")
    print()
    for batch_idx, (data, targets) in enumerate(tqdm(train_loader)):
        # Get data to cuda if possible
        data = data.to(device=DEVICE)
        targets = targets.to(device=DEVICE)

        # forward
        scores = CNN(data)
        if loss_function == 'CE':
            loss = criterion(scores, targets)
        elif loss_function == 'FL':
            loss = kornia.losses.focal_loss(
                                        pred=scores,               # Model predictions (logits)
                                        target=targets,           # Ground truth labels
                                        **kwargs_model
                                        )

        # backward
        optimizer.zero_grad()
        loss.backward()


        # gradient descent or adam step
        optimizer.step()

        running_loss += loss.item()
        total += targets.size(0)

    train_loss = running_loss / len(train_loader)
    train_acc = correct / total
    history['train_loss'].append(train_loss)
    history['train_acc'].append(train_acc)



    CNN.eval()
    val_loss = 0.0
    correct = 0
    total = 0
    targets_append = []
    preds_append = []


    with torch.no_grad():
        for data, targets in tqdm(test_loader, desc="Validation"):
            data = data.to(device=DEVICE)
            targets = targets.to(device=DEVICE)

            scores = CNN(data)

            # Calculate validation loss
            loss = criterion(scores, targets)
            val_loss += loss.item()

            # Calculate validation accuracy
            if loss_function == 'CE':
                _, predictions = scores.max(1)
            elif loss_function == 'FL':
                _, predictions = nn.Softmax(dim=1)(scores).max(1)

            correct += (predictions == targets).sum().item()
            total += targets.size(0)

            targets_append.extend(targets) # changed this line
            preds_append.extend(predictions) # added this line

    val_loss /= len(test_loader)
    val_acc = correct / total
    history['val_loss'].append(val_loss)
    history['val_acc'].append(val_acc)


    #data, targets = test_dataset

    conf_matrix = confusion_matrix(torch.tensor(targets_append).cpu(), torch.tensor(preds_append).cpu())
    class_names = dataset.classes

    # Plot confusion matrix
    plt.figure(figsize=(12, 10))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
                xticklabels=class_names, yticklabels=class_names)
    plt.title('Confusion Matrix')
    plt.ylabel('True Label')
    plt.xlabel('Predicted Label')
    plt.tight_layout()
    plt.savefig('efficientnetb0_confusion_matrix.png')
    plt.show()

    # Print classification report
    print("\nClassification Report:")
    print(classification_report(torch.tensor(targets_append).cpu(), torch.tensor(preds_append).cpu(), target_names=class_names))

def check_accuracy(loader, model):
    num_correct = 0
    num_samples = 0
    model.eval()

    with torch.no_grad():
        for x, y in loader:
            x = x.to(device=DEVICE)
            y = y.to(device=DEVICE)

            scores = CNN(x)
            _, predictions = scores.max(1)
            num_correct += (predictions == y).sum()
            num_samples += predictions.size(0)

    model.train()
    return num_correct / num_samples


print(f"Accuracy on training set: {check_accuracy(train_loader, CNN)*100:.2f}")
print(f"Accuracy on test set: {check_accuracy(test_loader, CNN)*100:.2f}")

#%matplotlib inline
import argparse
import random

import torch.nn.parallel

import torch.utils.data
import torchvision.utils as vutils

from IPython.display import HTML

# Set random seed for reproducibility
manualSeed = 1947
#manualSeed = random.randint(1, 10000) # use if you want new results
print("Random Seed: ", manualSeed)
random.seed(manualSeed)
torch.manual_seed(manualSeed)
torch.use_deterministic_algorithms(True) # Needed for reproducible results



# Number of workers for dataloader
workers = 2

# Batch size during training
batch_size = 128

# Spatial size of training images. All images will be resized to this
#   size using a transformer.
image_size = 64

# Number of channels in the training images. For color images this is 3
nc = 3

# Size of z latent vector (i.e. size of generator input)
nz = 100

# Size of feature maps in generator
ngf = 64

# Size of feature maps in discriminator
ndf = 64

# Number of training epochs
num_epochs = 10

# Learning rate for optimizers
lr = 0.001

# Beta1 hyperparameter for Adam optimizers
beta1 = 0.2

# Number of GPUs available. Use 0 for CPU mode.
ngpu = 1

# Create the dataloader
dataloader = DataLoader(dataset, batch_size=batch_size,
                                         shuffle=True, num_workers=workers)

# Decide which device we want to run on
DEVICE = torch.device("cuda:0" if (torch.cuda.is_available() and ngpu > 0) else "cpu")

# Plot some training images
real_batch = next(iter(dataloader))
plt.figure(figsize=(8,8))
plt.axis("off")
plt.title("Training Images")
plt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(DEVICE)[:128], padding=2, normalize=True).cpu(),(1,2,0)))
plt.show()

# custom weights initialization called on ``netG`` and ``netD``
def weights_init(m):
    classname = m.__class__.__name__
    if classname.find('Conv') != -1:
        nn.init.normal_(m.weight.data, 0.0, 0.02)
    elif classname.find('BatchNorm') != -1:
        nn.init.normal_(m.weight.data, 1.0, 0.02)
        nn.init.constant_(m.bias.data, 0)

class Generator(nn.Module):
    def __init__(self, ngpu):
        super(Generator, self).__init__()
        self.ngpu = ngpu
        self.main = nn.Sequential(
        # input is Z, going into a convolution
            nn.ConvTranspose2d( nz, ngf * 8, 4, 1, 0, bias=False),
            nn.BatchNorm2d(ngf * 8),
            nn.ReLU(True),
            nn.ConvTranspose2d(ngf * 8, ngf * 4, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf * 4),
            nn.ReLU(True),
            nn.ConvTranspose2d( ngf * 4, ngf * 2, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf * 2),
            nn.ReLU(True),
            nn.ConvTranspose2d( ngf * 2, ngf, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf),
            nn.ReLU(True),
            nn.ConvTranspose2d( ngf, nc, 4, 2, 1, bias=False),
            nn.Tanh()
        )

    def forward(self, input):
        return self.main(input)


# Create the generator
netG = Generator(ngpu).to(DEVICE)

# Handle multi-GPU if desired
if (DEVICE.type == 'cuda') and (ngpu > 1):
    netG = nn.DataParallel(netG, list(range(ngpu)))

# Apply the ``weights_init`` function to randomly initialize all weights
#  to ``mean=0``, ``stdev=0.02``.
netG.apply(weights_init)

# Print the model
print(netG)

class Discriminator(nn.Module):
    def __init__(self, ngpu):
        super(Discriminator, self).__init__()
        self.ngpu = ngpu
        self.main = nn.Sequential(
            nn.Conv2d(nc, ndf, 4, 2, 1, bias=False),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 2),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 4),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 8),
            nn.LeakyReLU(0.2, inplace=True),
            # state size. (ndf*8) x 4 x 4
            nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False),
            nn.Sigmoid()
        )

    def forward(self, input):
        return self.main(input)


  # Create the Discriminator
netD = Discriminator(ngpu).to(DEVICE)

# Handle multi-GPU if desired
if (DEVICE.type == 'cuda') and (ngpu > 1):
    netD = nn.DataParallel(netD, list(range(ngpu)))

# Apply the ``weights_init`` function to randomly initialize all weights
# like this: ``to mean=0, stdev=0.2``.
netD.apply(weights_init)

# Print the model
print(netD)

# Initialize the ``BCELoss`` function
criterion = nn.BCELoss()

# Create batch of latent vectors that we will use to visualize
#  the progression of the generator
fixed_noise = torch.randn(64, nz, 1, 1, device=DEVICE)

# Establish convention for real and fake labels during training
real_label = 1.
fake_label = 0.

# Setup Adam optimizers for both G and D
optimizerD = optim.Adam(netD.parameters(), lr=lr, betas=(beta1, 0.999))
optimizerG = optim.Adam(netG.parameters(), lr=lr, betas=(beta1, 0.999))

# Commented out IPython magic to ensure Python compatibility.
# Training Loop

# Lists to keep track of progress
img_list = []
G_losses = []
D_losses = []
iters = 0

# valid_loss_min = np.Inf
# patience = 5
# # current number of epochs, where validation loss didn't increase
# p = 0
# # whether training should be stopped
# stop = False

print("Starting Training Loop...")
# For each epoch
for epoch in range(num_epochs):
    # For each batch in the dataloader
    for i, data in enumerate(dataloader, 0):

        ############################
        # (1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))
        ###########################
        ## Train with all-real batch
        netD.zero_grad()
        # Format batch
        real_cpu = data[0].to(DEVICE)
        b_size = real_cpu.size(0)
        label = torch.full((b_size,), real_label, dtype=torch.float, device=DEVICE)
        # Forward pass real batch through D
        output = netD(real_cpu).view(-1)
        # Calculate loss on all-real batch
        errD_real = criterion(output, label)
        # Calculate gradients for D in backward pass
        errD_real.backward()
        D_x = output.mean().item()

        ## Train with all-fake batch
        # Generate batch of latent vectors
        noise = torch.randn(b_size, nz, 1, 1, device=DEVICE )
        # Generate fake image batch with G
        fake = netG(noise)
        label.fill_(fake_label)
        # Classify all fake batch with D
        output = netD(fake.detach()).view(-1)
        # Calculate D's loss on the all-fake batch
        errD_fake = criterion(output, label)
        # Calculate the gradients for this batch, accumulated (summed) with previous gradients
        errD_fake.backward()
        D_G_z1 = output.mean().item()
        # Compute error of D as sum over the fake and the real batches
        errD = errD_real + errD_fake
        # Update D
        optimizerD.step()

        ############################
        # (2) Update G network: maximize log(D(G(z)))
        ###########################
        netG.zero_grad()
        label.fill_(real_label)  # fake labels are real for generator cost
        # Since we just updated D, perform another forward pass of all-fake batch through D
        output = netD(fake).view(-1)
        # Calculate G's loss based on this output
        errG = criterion(output, label)
        # Calculate gradients for G
        errG.backward()
        D_G_z2 = output.mean().item()
        # Update G
        optimizerG.step()

        # Output training stats
        if i % 50 == 0:
            print('[%d/%d][%d/%d]\tLoss_D: %.4f\tLoss_G: %.4f\tD(x): %.4f\tD(G(z)): %.4f / %.4f'
#                   % (epoch, num_epochs, i, len(dataloader),
                     errD.item(), errG.item(), D_x, D_G_z1, D_G_z2))

        # Save Losses for plotting later
        G_losses.append(errG.item())
        D_losses.append(errD.item())

        # Check how the generator is doing by saving G's output on fixed_noise
        if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == len(dataloader)-1)):
            with torch.no_grad():
                fake = netG(fixed_noise).detach().cpu()
            img_list.append(vutils.make_grid(fake, padding=2, normalize=True))

        iters += 1

plt.figure(figsize=(10,5))
plt.title("Generator and Discriminator Loss During Training")
plt.plot(G_losses,label="G")
plt.plot(D_losses,label="D")
plt.xlabel("iterations")
plt.ylabel("Loss")
plt.legend()
plt.show()

# Plot the real images
plt.figure(figsize=(15,15))
plt.subplot(1,2,1)
plt.axis("off")
plt.title("Real Images")
plt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(DEVICE)[:64], padding=5, normalize=True).cpu(),(1,2,0)))

# Plot the fake images from the last epoch
plt.subplot(1,2,2)
plt.axis("off")
plt.title("Fake Images")
plt.imshow(np.transpose(img_list[-1],(1,2,0)))
plt.show()

print(img_list[-1])

plt.subplot(1,2,2)
plt.axis("off")
plt.title("Fake Images")
plt.imshow(np.transpose(img_list))
plt.show()

