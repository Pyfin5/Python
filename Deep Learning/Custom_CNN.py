# -*- coding: utf-8 -*-
"""Final Project - 7643.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dNuB1hXXXX95NypAS3fpsWQZqbKYJTN7
"""

pip install kornia

import torch
import torch.nn as nn
import torchvision
from torchvision import datasets, models, transforms
import numpy as np
from torch import optim
from typing import Iterable, List
from torch.utils.data import (DataLoader,)  # Gives easier dataset managment by creating mini batches etc.
from tqdm import tqdm  # For nice progress bar!
import kornia
import matplotlib.pyplot as plt
import os
from PIL import Image
from torchvision.datasets import ImageFolder
from torch.utils.data import Dataset, random_split, DataLoader
import cv2
from sklearn.model_selection import train_test_split
from cv2 import COLOR_RGB2GRAY
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns
seed = torch.manual_seed(1947)

DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(DEVICE)

# from google.colab import drive
# drive.mount('/content/drive')

import kagglehub

# Download kaggle dataset
path = kagglehub.dataset_download("ismailpromus/skin-diseases-image-dataset")

print("Path to dataset files:", path)

print(os.listdir(path))

path = os.path.join(path,'IMG_CLASSES')
print(os.listdir(os.path.join(path,'1. Eczema 1677')))

TARGET_SIZE = (64, 64)  # (height, width)


# Transformation pipeline
transform = transforms.Compose([
    transforms.Resize(TARGET_SIZE),       # Resizes shorter edge to target size (maintains aspect ratio)
    transforms.CenterCrop(TARGET_SIZE),   # Ensures exact size by center cropping
    transforms.ToTensor(),                # Converts to tensor [C, H, W]
    # Add normalization if needed (e.g., for pretrained models)
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])


dataset = ImageFolder(path, transform=transform)

print(dataset)

# labels = []
# images = []
# classes = []
# image_name = []

# for i in os.listdir(os.path.join(path)):
#   string_print = os.listdir(os.path.join(path,i))
#   for j in string_print:
#     string_label = i.split('.')
#     string_label = int(string_label[0])
#     labels.append(string_label)

#     images.append(cv2.imread(os.path.join(path, i,j)))
#     classes.append(i)
#     image_name.append(j)


# images = torch.tensor(images)
# labels = torch.tensor(labels)
# classes = torch.tensor(classes)
# image_name = torch.tensor(image_name)

# TARGET_SIZE = (64, 64)  # (height, width)


# # Transformation pipeline
# transform = transforms.Compose([
#     transforms.Resize(TARGET_SIZE),       # Resizes shorter edge to target size (maintains aspect ratio)
#     transforms.CenterCrop(TARGET_SIZE),   # Ensures exact size by center cropping
#     transforms.ToTensor(),                # Converts to tensor [C, H, W]
#     # Add normalization if needed (e.g., for pretrained models)
#     transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
# ])

# images = [transform(img) for img in images]

# print(os.listdir(os.path.join(path)))
# print(labels[0])
# print(images[0])
# print(classes[0])
# print(image_name[0])

# image = Image.open(os.path.join(path, '10. Warts Molluscum and other Viral Infections - 2103', 'v-herpes-buttocks-16.jpg'))
# image_rgb = cv2.cvtColor(np.array(images[0]), cv2.COLOR_BGR2RGB)
# #image_rgb = images[0]
# plt.imshow(image_rgb)
# plt.show()

# plt.imshow(image)
# plt.show()

loss_function = 'CE' # CE or FL


class Project_CNN(nn.Module):
    def __init__(self, loss_func = loss_function):
        super().__init__()

        self.loss_func = loss_func
        #Layer = Conv - BatchNorm - ReLU - MaxPool


        self.conv1 = nn.Conv2d(in_channels = 3, out_channels= 32, kernel_size=3, stride=1, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.relu1 = nn.ReLU()
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)


        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.bn2 = nn.BatchNorm2d(64)
        self.relu2 = nn.ReLU()
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)


        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.bn3 = nn.BatchNorm2d(128)
        self.relu3 = nn.ReLU()
        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)


        self.conv4 = nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)
        self.bn4 = nn.BatchNorm2d(256)
        self.relu4 = nn.ReLU()
        self.pool4 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.conv5 = nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1)
        self.bn5 = nn.BatchNorm2d(512)
        self.relu5 = nn.ReLU()
        self.pool5 = nn.MaxPool2d(kernel_size=2, stride=2)


        self.dropout = nn.Dropout(0.5)

        # Fully connected layer

        self.fc = nn.Linear(128 * 4 * 4, 10)

        if self.loss_func == 'CE':
            pass
        elif self.loss_func == 'FL':
            self.softmax = nn.Softmax(dim=1)


    def forward(self, x):
        # Layer 1
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu1(x)
        x = self.pool1(x)

        # Layer 2
        x = self.conv2(x)
        x = self.bn2(x)
        x = self.relu2(x)
        x = self.pool2(x)

        # Layer 3
        x = self.conv3(x)
        x = self.bn3(x)
        x = self.relu3(x)
        x = self.pool3(x)

        # Layer 4
        x = self.conv4(x)
        x = self.bn4(x)
        x = self.relu4(x)
        x = self.pool4(x)

        # Layer 5
        x = self.conv5(x)
        x = self.bn5(x)
        x = self.relu5(x)
        x = self.pool5(x)

        x = self.dropout(x)


        # Flatten and fully connected
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        if self.loss_func == 'CE':
            pass
        elif self.loss_func == 'FL':
            x = self.softmax(x)
        return x

def data_split(data):
  
  train_size = int(0.8 * len(dataset))  # 80% for training
  test_size = len(dataset) - train_size  # 20% for testing
  train_dataset, test_dataset = random_split(dataset, [train_size, test_size])
  return train_dataset, test_dataset


train_datset, test_dataset = data_split(dataset)

sample, label = train_datset[1]
print(f"Sample shape: {sample.size()}")  # For transformed images
print(f"Label: {label} ({dataset.classes[label]})")

CNN = Project_CNN().to(DEVICE)

optimizer = optim.Adam(CNN.parameters(), lr=0.001)

if loss_function == 'CE':
  criterion = nn.CrossEntropyLoss()
elif loss_function == 'FL':
  pass

kwargs_model = {"alpha": 0.5,
                "gamma": 2.0,
                "reduction": 'mean'}

num_epochs = 10
learning_rate = 0.001
batch_size = 32

train_loader = DataLoader(dataset=train_datset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=True)

history = {'train_loss': [], 'val_loss': [], 'train_acc': [], 'val_acc': []}

for epoch in range(num_epochs):
    CNN.train()
    running_loss = 0.0
    correct = 0
    total = 0
    print(f"Epoch {epoch+1}/{num_epochs}")
    print()
    for batch_idx, (data, targets) in enumerate(tqdm(train_loader)):
        # Get data to cuda if possible
        data = data.to(device=DEVICE)
        targets = targets.to(device=DEVICE)

        # forward
        scores = CNN(data)
        if loss_function == 'CE':
            loss = criterion(scores, targets)
        elif loss_function == 'FL':
            loss = kornia.losses.focal_loss(
                                        pred=scores,               # Model predictions (logits)
                                        target=targets,           # Ground truth labels
                                        **kwargs_model
                                        )

        # backward
        optimizer.zero_grad()
        loss.backward()


        # gradient descent or adam step
        optimizer.step()

        running_loss += loss.item()
        total += targets.size(0)

    train_loss = running_loss / len(train_loader)
    train_acc = correct / total
    history['train_loss'].append(train_loss)
    history['train_acc'].append(train_acc)



    CNN.eval()
    val_loss = 0.0
    correct = 0
    total = 0
    targets_append = []
    preds_append = []


    with torch.no_grad():
        for data, targets in tqdm(test_loader, desc="Validation"):
            data = data.to(device=DEVICE)
            targets = targets.to(device=DEVICE)

            scores = CNN(data)

            # Calculate validation loss
            loss = criterion(scores, targets)
            val_loss += loss.item()

            # Calculate validation accuracy
            if loss_function == 'CE':
                _, predictions = scores.max(1)
            elif loss_function == 'FL':
                _, predictions = nn.Softmax(dim=1)(scores).max(1)

            correct += (predictions == targets).sum().item()
            total += targets.size(0)

            targets_append.extend(targets) # changed this line
            preds_append.extend(predictions) # added this line

    val_loss /= len(test_loader)
    val_acc = correct / total
    history['val_loss'].append(val_loss)
    history['val_acc'].append(val_acc)


    #data, targets = test_dataset

    conf_matrix = confusion_matrix(torch.tensor(targets_append).cpu(), torch.tensor(preds_append).cpu())
    class_names = dataset.classes

    # Plot confusion matrix
    plt.figure(figsize=(12, 10))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
                xticklabels=class_names, yticklabels=class_names)
    plt.title('Confusion Matrix')
    plt.ylabel('True Label')
    plt.xlabel('Predicted Label')
    plt.tight_layout()
    plt.savefig('efficientnetb0_confusion_matrix.png')
    plt.show()

    # Print classification report
    print("\nClassification Report:")
    print(classification_report(torch.tensor(targets_append).cpu(), torch.tensor(preds_append).cpu(), target_names=class_names))

def check_accuracy(loader, model):
    num_correct = 0
    num_samples = 0
    model.eval()

    with torch.no_grad():
        for x, y in loader:
            x = x.to(device=DEVICE)
            y = y.to(device=DEVICE)

            scores = CNN(x)
            _, predictions = scores.max(1)
            num_correct += (predictions == y).sum()
            num_samples += predictions.size(0)

    model.train()
    return num_correct / num_samples


print(f"Accuracy on training set: {check_accuracy(train_loader, CNN)*100:.2f}")
print(f"Accuracy on test set: {check_accuracy(test_loader, CNN)*100:.2f}")


